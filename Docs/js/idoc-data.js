const MEMBERS = [
{"signature":"Board","childcount":25,"type":"Class","name":"Board","token":"public class Board : Singleton<Board> ","scope":""},{"signature":"Board.spacing","childcount":0,"type":"Field","name":"spacing","token":"public static int spacing ","scope":"Board"},{"signature":"Board.directions","childcount":0,"type":"Field","name":"directions","token":"public static readonly Vector2Int[] directions = {\r\n\t\tVector2Int.up * spacing,\r\n\t\tVector2Int.right * spacing,\r\n\t\tVector2Int.down * spacing,\r\n\t\tVector2Int.left * spacing\r\n\t};","scope":"Board"},{"signature":"Board.Nodes","childcount":0,"type":"Property","name":"Nodes","token":"public List<Node> Nodes { get; }","scope":"Board"},{"signature":"Board.PlayerNode","childcount":0,"type":"Property","name":"PlayerNode","token":"public Node PlayerNode { get; }","scope":"Board"},{"signature":"Board.StartNode","childcount":0,"type":"Property","name":"StartNode","token":"public Node StartNode { get; }","scope":"Board"},{"signature":"Board.GoalNode","childcount":0,"type":"Property","name":"GoalNode","token":"public Node GoalNode { get; }","scope":"Board"},{"signature":"Board.IsDrawn","childcount":0,"type":"Property","name":"IsDrawn","token":"public bool IsDrawn { get; }","scope":"Board"},{"signature":"Board.InitBoard()","childcount":0,"type":"Method","name":"InitBoard","token":"public void InitBoard()","scope":"Board"},{"signature":"Board.GetNodeList()","childcount":0,"type":"Method","name":"GetNodeList","token":"public void GetNodeList()","scope":"Board"},{"signature":"Board.FindNodeAt(Vector3)","childcount":0,"type":"Method","name":"FindNodeAt","token":"public Node FindNodeAt(Vector3 position)","scope":"Board","params":{"position":"Vector3"}},{"signature":"Board.FindPlayerNode()","childcount":0,"type":"Method","name":"FindPlayerNode","token":"public Node FindPlayerNode()","scope":"Board"},{"signature":"Board.UpdatePlayerNode()","childcount":0,"type":"Method","name":"UpdatePlayerNode","token":"public void UpdatePlayerNode()","scope":"Board"},{"signature":"Board.FindStartNode()","childcount":0,"type":"Method","name":"FindStartNode","token":"public Node FindStartNode()","scope":"Board"},{"signature":"Board.FindGoalNode()","childcount":0,"type":"Method","name":"FindGoalNode","token":"public Node FindGoalNode()","scope":"Board"},{"signature":"CharacterMover","childcount":14,"type":"Class","name":"CharacterMover","token":"public class CharacterMover : MonoBehaviour ","scope":"","comments":{"summary":"Controls character movement and"}},{"signature":"CharacterMover.OnCharacterMove()","childcount":0,"type":"Method","name":"OnCharacterMove","token":"public delegate void OnCharacterMove()","scope":"CharacterMover"},{"signature":"CharacterMover.notifyCharacterMoveObservers","childcount":0,"type":"Field","name":"notifyCharacterMoveObservers","token":"public static OnCharacterMove notifyCharacterMoveObservers ","scope":"CharacterMover"},{"signature":"CharacterMover.IsMoving","childcount":0,"type":"Property","name":"IsMoving","token":"public bool IsMoving { get; set; }","scope":"CharacterMover"},{"signature":"CharacterMover.Move(Vector3, float)","childcount":0,"type":"Method","name":"Move","token":"public void Move(Vector3 destinationPos, float delayTime = 0f)","scope":"CharacterMover","comments":{"summary":"Moves the player to the provided destination after a specified delay."},"params":{"destinationPos":"Vector3","delayTime":"float"}},{"signature":"Compass","childcount":3,"type":"Class","name":"Compass","token":"public class Compass : MonoBehaviour ","scope":""},{"signature":"Fader","childcount":13,"type":"Class","name":"Fader","token":"[RequireComponent(typeof(MaskableGraphic))]\npublic class Fader : MonoBehaviour ","scope":"","comments":{"summary":"Used to fade Maskable graphic components and enable/disable any button component attached to the same gameObject."}},{"signature":"Fader.FadeOn()","childcount":0,"type":"Method","name":"FadeOn","token":"public void FadeOn()","scope":"Fader","comments":{"summary":"Wrapper for iTween.ValueTo(gameObject, args), used to fade a MaskableGraphic alpha from 0 to 1.\r\n\t Also enables any attached Button component on the same gameObject."}},{"signature":"Fader.FadeOff()","childcount":0,"type":"Method","name":"FadeOff","token":"public void FadeOff()","scope":"Fader","comments":{"summary":"Wrapper for iTween.ValueTo(gameObject, args), used to fade a MaskableGraphic alpha from 1 to 0.\r\n\t Also disables any attached Button component on the same gameObject."}},{"signature":"GameManager","childcount":24,"type":"Class","name":"GameManager","token":"public class GameManager : Singleton<GameManager> ","scope":"","comments":{"summary":"Handles game logic and flow."}},{"signature":"GameManager.setupEvent","childcount":0,"type":"Field","name":"setupEvent","token":"public UnityEvent setupEvent ","scope":"GameManager"},{"signature":"GameManager.startLevelEvent","childcount":0,"type":"Field","name":"startLevelEvent","token":"public UnityEvent startLevelEvent ","scope":"GameManager"},{"signature":"GameManager.playLevelEvent","childcount":0,"type":"Field","name":"playLevelEvent","token":"public UnityEvent playLevelEvent ","scope":"GameManager"},{"signature":"GameManager.endLevelEvent","childcount":0,"type":"Field","name":"endLevelEvent","token":"public UnityEvent endLevelEvent ","scope":"GameManager"},{"signature":"GameManager.HasLevelStarted","childcount":0,"type":"Property","name":"HasLevelStarted","token":"public bool HasLevelStarted { get; }","scope":"GameManager"},{"signature":"GameManager.IsGamePlaying","childcount":0,"type":"Property","name":"IsGamePlaying","token":"public bool IsGamePlaying { get; }","scope":"GameManager"},{"signature":"GameManager.IsGameOver","childcount":0,"type":"Property","name":"IsGameOver","token":"public bool IsGameOver { get; }","scope":"GameManager"},{"signature":"GameManager.HasLevelFinished","childcount":0,"type":"Property","name":"HasLevelFinished","token":"public bool HasLevelFinished { get; set; }","scope":"GameManager"},{"signature":"GameManager.PlayLevel()","childcount":0,"type":"Method","name":"PlayLevel","token":"public void PlayLevel()","scope":"GameManager","comments":{"summary":"Sets hasLevelStarted to true, which is used to break out of the StartLevelRoutine() coroutine."}},{"signature":"GraphicMoveMode","childcount":4,"type":"Enum","name":"GraphicMoveMode","token":"public enum GraphicMoveMode ","scope":"","comments":{"summary":"Wrapper class for iTween.RotateBy(gameObject, args), used to animate gameObject in the scene."}},{"signature":"GraphicMoveMode.MoveTo","childcount":0,"type":"EnumValue","name":"MoveTo","token":"MoveTo","scope":"GraphicMoveMode"},{"signature":"GraphicMoveMode.MoveFrom","childcount":0,"type":"EnumValue","name":"MoveFrom","token":"MoveFrom","scope":"GraphicMoveMode"},{"signature":"GraphicMoveMode.ScaleTo","childcount":0,"type":"EnumValue","name":"ScaleTo","token":"ScaleTo","scope":"GraphicMoveMode"},{"signature":"GraphicMoveMode.ScaleFrom","childcount":0,"type":"EnumValue","name":"ScaleFrom","token":"ScaleFrom","scope":"GraphicMoveMode"},{"signature":"GraphicMover","childcount":11,"type":"Class","name":"GraphicMover","token":"public class GraphicMover : MonoBehaviour ","scope":""},{"signature":"GraphicMover.Reset()","childcount":0,"type":"Method","name":"Reset","token":"public void Reset()","scope":"GraphicMover","comments":{"summary":"Resets transform.position or transform.localScale based on the GraphicMoveMode selected."}},{"signature":"GraphicMover.Move()","childcount":0,"type":"Method","name":"Move","token":"public void Move()","scope":"GraphicMover","comments":{"summary":"Wrapper for iTween.MoveTo/From(gameObject, args) and iTween.ScaleTo/From(gameObject, args) based on the GraphicMoveMode selected."}},{"signature":"Link","childcount":6,"type":"Class","name":"Link","token":"public class Link : MonoBehaviour ","scope":""},{"signature":"Link.DrawLink(Vector3, Vector3)","childcount":0,"type":"Method","name":"DrawLink","token":"public void DrawLink(Vector3 startPos, Vector3 endPos)","scope":"Link","params":{"startPos":"Vector3","endPos":"Vector3"}},{"signature":"Node","childcount":33,"type":"Class","name":"Node","token":"public class Node : MonoBehaviour ","scope":""},{"signature":"Node.IsStartNode","childcount":0,"type":"Property","name":"IsStartNode","token":"public bool IsStartNode { get; }","scope":"Node"},{"signature":"Node.IsGoalNode","childcount":0,"type":"Property","name":"IsGoalNode","token":"public bool IsGoalNode { get; }","scope":"Node"},{"signature":"Node.Coordinate","childcount":0,"type":"Property","name":"Coordinate","token":"public Vector2Int Coordinate { get; }","scope":"Node"},{"signature":"Node.Neighbours","childcount":0,"type":"Property","name":"Neighbours","token":"public List<Node> Neighbours { get; }","scope":"Node"},{"signature":"Node.LinkedNodes","childcount":0,"type":"Property","name":"LinkedNodes","token":"public List<Node> LinkedNodes { get; }","scope":"Node"},{"signature":"Node.IsInitialized","childcount":0,"type":"Property","name":"IsInitialized","token":"public bool IsInitialized { get; }","scope":"Node"},{"signature":"Node.InitNode()","childcount":0,"type":"Method","name":"InitNode","token":"public void InitNode()","scope":"Node"},{"signature":"Node.ShowGeometry()","childcount":0,"type":"Method","name":"ShowGeometry","token":"public void ShowGeometry()","scope":"Node"},{"signature":"Node.FindNeighbours(List<Node>)","childcount":0,"type":"Method","name":"FindNeighbours","token":"public List<Node> FindNeighbours(List<Node> nodes)","scope":"Node","params":{"nodes":"List<Node>"}},{"signature":"Obstacle","childcount":3,"type":"Class","name":"Obstacle","token":"[RequireComponent(typeof(BoxCollider))]\npublic class Obstacle : MonoBehaviour ","scope":""},{"signature":"PlayerInput","childcount":7,"type":"Class","name":"PlayerInput","token":"public class PlayerInput : MonoBehaviour ","scope":"","comments":{"summary":"Processes raw player input"}},{"signature":"PlayerInput.HorizontalThrow","childcount":0,"type":"Property","name":"HorizontalThrow","token":"public float HorizontalThrow { get; }","scope":"PlayerInput"},{"signature":"PlayerInput.VerticalThrow","childcount":0,"type":"Property","name":"VerticalThrow","token":"public float VerticalThrow { get; }","scope":"PlayerInput"},{"signature":"PlayerInput.InputEnabled","childcount":0,"type":"Property","name":"InputEnabled","token":"public bool InputEnabled { get; set; }","scope":"PlayerInput"},{"signature":"PlayerInput.GetKeyInput()","childcount":0,"type":"Method","name":"GetKeyInput","token":"public void GetKeyInput()","scope":"PlayerInput"},{"signature":"PlayerManager","childcount":10,"type":"Class","name":"PlayerManager","token":"[RequireComponent(typeof(CharacterMover))]\n[RequireComponent(typeof(PlayerInput))]\npublic class PlayerManager : Singleton<PlayerManager> ","scope":"","comments":{"summary":"Responsible for converting player input into character movement."}},{"signature":"PlayerManager.CharacterMover","childcount":0,"type":"Property","name":"CharacterMover","token":"public CharacterMover CharacterMover { get; }","scope":"PlayerManager"},{"signature":"PlayerManager.PlayerInput","childcount":0,"type":"Property","name":"PlayerInput","token":"public PlayerInput PlayerInput { get; }","scope":"PlayerManager"},{"signature":"PlayerManager.PlayerNode","childcount":0,"type":"Property","name":"PlayerNode","token":"public Node PlayerNode { get; }","scope":"PlayerManager"},{"signature":"PostProcessingProfileManager","childcount":5,"type":"Class","name":"PostProcessingProfileManager","token":"[RequireComponent(typeof(PostProcessVolume))]\npublic class PostProcessingProfileManager : MonoBehaviour ","scope":"","comments":{"summary":"Post-Processing profile manager use to swap between different profiles."}},{"signature":"PostProcessingProfileManager.EnableBlurProfile(bool)","childcount":0,"type":"Method","name":"EnableBlurProfile","token":"public void EnableBlurProfile(bool state)","scope":"PostProcessingProfileManager","comments":{"summary":"Switches between the default and blur post-processing profiles."},"params":{"state":"bool"}},{"signature":"Spinner","childcount":4,"type":"Class","name":"Spinner","token":"public class Spinner : MonoBehaviour ","scope":"","comments":{"summary":"Wrapper class for iTween.RotateBy(gameObject, args), used to rotate gameObject in the scene."}}
];
const ROOT_MEMBERS = [
{"signature":"Board","childcount":25,"type":"Class","name":"Board","token":"public class Board : Singleton<Board> ","scope":""},{"signature":"CharacterMover","childcount":14,"type":"Class","name":"CharacterMover","token":"public class CharacterMover : MonoBehaviour ","scope":"","comments":{"summary":"Controls character movement and"}},{"signature":"Compass","childcount":3,"type":"Class","name":"Compass","token":"public class Compass : MonoBehaviour ","scope":""},{"signature":"Fader","childcount":13,"type":"Class","name":"Fader","token":"[RequireComponent(typeof(MaskableGraphic))]\npublic class Fader : MonoBehaviour ","scope":"","comments":{"summary":"Used to fade Maskable graphic components and enable/disable any button component attached to the same gameObject."}},{"signature":"GameManager","childcount":24,"type":"Class","name":"GameManager","token":"public class GameManager : Singleton<GameManager> ","scope":"","comments":{"summary":"Handles game logic and flow."}},{"signature":"GraphicMoveMode","childcount":4,"type":"Enum","name":"GraphicMoveMode","token":"public enum GraphicMoveMode ","scope":"","comments":{"summary":"Wrapper class for iTween.RotateBy(gameObject, args), used to animate gameObject in the scene."}},{"signature":"GraphicMover","childcount":11,"type":"Class","name":"GraphicMover","token":"public class GraphicMover : MonoBehaviour ","scope":""},{"signature":"Link","childcount":6,"type":"Class","name":"Link","token":"public class Link : MonoBehaviour ","scope":""},{"signature":"Node","childcount":33,"type":"Class","name":"Node","token":"public class Node : MonoBehaviour ","scope":""},{"signature":"Obstacle","childcount":3,"type":"Class","name":"Obstacle","token":"[RequireComponent(typeof(BoxCollider))]\npublic class Obstacle : MonoBehaviour ","scope":""},{"signature":"PlayerInput","childcount":7,"type":"Class","name":"PlayerInput","token":"public class PlayerInput : MonoBehaviour ","scope":"","comments":{"summary":"Processes raw player input"}},{"signature":"PlayerManager","childcount":10,"type":"Class","name":"PlayerManager","token":"[RequireComponent(typeof(CharacterMover))]\n[RequireComponent(typeof(PlayerInput))]\npublic class PlayerManager : Singleton<PlayerManager> ","scope":"","comments":{"summary":"Responsible for converting player input into character movement."}},{"signature":"PostProcessingProfileManager","childcount":5,"type":"Class","name":"PostProcessingProfileManager","token":"[RequireComponent(typeof(PostProcessVolume))]\npublic class PostProcessingProfileManager : MonoBehaviour ","scope":"","comments":{"summary":"Post-Processing profile manager use to swap between different profiles."}},{"signature":"Spinner","childcount":4,"type":"Class","name":"Spinner","token":"public class Spinner : MonoBehaviour ","scope":"","comments":{"summary":"Wrapper class for iTween.RotateBy(gameObject, args), used to rotate gameObject in the scene."}}
];
const BUILTIN_WORDS_REGEX = /\b(?:__arglist|abstract|as|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|Dictionary|do|double|dynamic|else|enum|event|Exception|extern|false|final|finally|fixed|float|for|foreach|from|from|get|get;|goto|grouby|HashSet|if|in|in|int|interface|internal|is|List|lock|long|nameof|namespace|new|null|object|out|params|partial|private|protected|public|readonly|ref|return|sealed|select|select|set|set;|short|Single|Single32|Single64|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|UInt16|UInt32|UInt64|ulong|unchecked|unsafe|ushort|using|var|virtual|void|volatile|where|where|while)\b/g;
