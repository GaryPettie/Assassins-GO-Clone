const MEMBERS = [
{"signature":"TestNamespace","childcount":2,"type":"Namespace","name":"TestNamespace","token":"namespace TestNamespace","scope":"","comments":{"summary":"The summary of the namespace 'TestNamespace'"}},{"signature":"TestNamespace.TestClass","childcount":3,"type":"Class","name":"TestClass","token":"public class TestClass ","scope":"TestNamespace","comments":{"summary":"The summary of the class 'MyCSClass'"}},{"signature":"TestNamespace.TestClass.field","childcount":0,"type":"Field","name":"field","token":"[SerializeField]\npublic string field ","scope":"TestNamespace.TestClass","comments":{"summary":"This is a field comment"}},{"signature":"TestNamespace.TestClass.Property","childcount":0,"type":"Property","name":"Property","token":"public int Property { get; set; }","scope":"TestNamespace.TestClass","comments":{"summary":"This is a property comment"}},{"signature":"TestNamespace.TestClass.Function(string)","childcount":0,"type":"Method","name":"Function","token":"public string Function(string arg)","scope":"TestNamespace.TestClass","comments":{"summary":"This is a Test function which changes the value of <see cref=\"field\"/> to\r\n\t\t The value of the param <paramref name=\"arg\"/>.","example":"The following code is an example :\r\n\t\t <code>\r\n\t\t using TestNamespace;\r\n\t\t\r\n\t\t\tpublic class TestClass {\r\n\t\t\r\n\t\t\t\tvoid Test()\r\n\t\t\t\t{\r\n\t\t\t\t\tvar test = new MyCSClass();\r\n\t\t\t\t\ttest.MyFunction(\"TEST STRING\");\r\n\t\t\t\t\tConsole.WriteLine(test.field);\r\n\t\t\t\t}\t\r\n\t\t }\r\n\t\t</code>","remarks":"This is a remarks","param-arg":"Function parameter comment"},"params":{"arg":"string"}},{"signature":"TestNamespace.TestEnum","childcount":3,"type":"Enum","name":"TestEnum","token":"public enum TestEnum ","scope":"TestNamespace"},{"signature":"TestNamespace.TestEnum.A","childcount":0,"type":"EnumValue","name":"A","token":"A","scope":"TestNamespace.TestEnum","comments":{"summary":"A Comment"}},{"signature":"TestNamespace.TestEnum.B","childcount":0,"type":"EnumValue","name":"B","token":"B","scope":"TestNamespace.TestEnum","comments":{"summary":"B Comment"}},{"signature":"TestNamespace.TestEnum.C","childcount":0,"type":"EnumValue","name":"C","token":"C","scope":"TestNamespace.TestEnum","comments":{"summary":"C Comment"}}
];
const ROOT_MEMBERS = [
{"signature":"TestNamespace","childcount":2,"type":"Namespace","name":"TestNamespace","token":"namespace TestNamespace","scope":"","comments":{"summary":"The summary of the namespace 'TestNamespace'"}}
];
const BUILTIN_WORDS_REGEX = /\b(?:__arglist|abstract|as|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|Dictionary|do|double|dynamic|else|enum|event|Exception|extern|false|final|finally|fixed|float|for|foreach|from|from|get|get;|goto|grouby|HashSet|if|in|in|int|interface|internal|is|List|lock|long|nameof|namespace|new|null|object|out|params|partial|private|protected|public|readonly|ref|return|sealed|select|select|set|set;|short|Single|Single32|Single64|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|UInt16|UInt32|UInt64|ulong|unchecked|unsafe|ushort|using|var|virtual|void|volatile|where|where|while)\b/g;
